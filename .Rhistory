palNoTransp <- colorRampPalette(c(rgb(1,1,0,1),rgb(1,0,0,1)), alpha=TRUE)(10)
print(plot(imgToPlot, legend.only=TRUE, axes=FALSE,legend=TRUE, col = palNoTransp, horizontal = TRUE, box=FALSE, add=TRUE, legend.outside = TRUE,
legend.args=list(text='DAI', side=1, font=2, line=2, cex=0.8)))
ndviThresoldForAreas <- as.data.frame(reclasifyNDVIList [[imageWithLowDisfavourableAreas]],na.rm=TRUE)
names (ndviThresoldForAreas) <- c("type")
dfFinalForAreas <- ndviThresoldForAreas %>% mutate(elemtType = case_when(
type == 1 ~ "water",
type == 2 ~ "non_veg",
type == 3 ~ "low_veg",
type == 4 ~ "mod_veg",
type == 5 ~ "dense_veg",
)
)
#ndviThresoldForAreas[ndviThresoldForAreas==1]
resultsForAreas <- dfFinalForAreas %>% group_by(elemtType) %>% summarise(km2 = n()*30*30/1000000)
proportionAreas <- resultsForAreas %>% mutate (percentArea = km2/sum(km2)*100)
totalKm2ForCity <- round(sum(resultsForAreas$km2),2)
dfDisfAreasFinal <- data.frame(elemtType="disfavourable",
km2=round(totalDisfArea,2),  percentArea=round(totalDisfArea,2)/totalKm2ForCity*100)
#print(plot (disfareas,axes=FALSE, legend=FALSE, horizontal = TRUE,
#box=FALSE )  )
totalRow <- data.frame ("totalCityArea",sum(resultsForAreas$km2),100)
names(totalRow) <- c("elemtType","km2","percentArea")
proportionAreas <- rbind (proportionAreas,totalRow)
proportionAreas <- rbind (proportionAreas,dfDisfAreasFinal)
proportionAreas <- data.frame(lapply(proportionAreas,
function(x) if(is.numeric(x)) round(x, 1) else x))
print(kable(proportionAreas))
write.csv(proportionAreas,paste(cityName,".csv",sep=""))
} #if image
} #for
## Export kml
x_wgs84 <- projectRaster(imgToPlot, crs='+proj=longlat +datum=WGS84')
# Cambiar nombre a la ciudad
nombreCiudad <- paste (cityName,'.kml',sep = "")
KML(x_wgs84, nombreCiudad, col=pal,
colNA=NA, maxpixels=100000, blur=1, zip='', overwrite=TRUE)
naomitDF <- na.omit (dfFull)
cluster <- as.factor(naomitDF$CLUSTER)
p <- ggplot(naomitDF[1:2], aes(x=DAI, fill=cluster,y = ..scaled..) ) +
geom_density(alpha=0.4) + theme_minimal() +
scale_fill_manual(values=myColor[1:bestNCluster])
print (p)
# geom_text(aes(x=2,y=0,label = paste("PDAI=",quantile_*100,"%",sep=""),
#               vjust = -1))
#print (p3)
item <- 1
#Componemos un df con todos los pares lst,ndvi de todas las imÃ¡genes
for (t in lst_reclassification_list) {
nd <- ndvi_list[[item]]
matrix <- cbind(values(t),values(nd))
df <- as.data.frame(matrix)
x <- c("lst_value","ndvi_value")
colnames(df) <- x
df <- df %>%
filter (ndvi_value>0)
#Remove outliers
outli <- boxplot(df$lst_value,plot=FALSE)$out
df$lst_value[df$lst_value %in% outli]  <- NA
outli <- boxplot(df$ndvi,plot=FALSE)$out
df$ndvi_value[df$ndvi_value %in% outli]  <- NA
df <- na.omit (df)
df <- arrange(df,ndvi_value)
if (item==1) {
dfTotalImagesLSTNDVI <- df
}
else {
dfTotalImagesLSTNDVI <- rbind (dfTotalImagesLSTNDVI,df)
}
item <- item + 1
}
# df_filter <- df %>%
#   filter ( (!is.na(ndvi_value)) & (ndvi_value>=0.2) &
#              (ndvi_value<1) & (!is.na(lst_value)) & (!is.nan(ndvi_value)) &
#              (!is.nan(lst_value))   ) %>%
#   arrange(desc(lst_value))
#
# rm (df)
#
#df_ <- top_n(df_filter, n = 10000, lst_value)
#uncomment for plot all df
#sample <- dfTotalImagesLSTNDVI[sample(nrow(dfTotalImagesLSTNDVI), 100000), ]
b <- ggplot(dfTotalImagesLSTNDVI, aes(x = ndvi_value, y = lst_value)) +
geom_point(color = "indianred1", size = 0.0001)+
#geom_smooth(method = "loess", color= "lightgreen")
geom_smooth(method='lm') +
stat_regline_equation(label.y = max(na.omit(dfTotalImagesLSTNDVI$lst_value)), aes(label = ..eq.label..)) +
stat_regline_equation(label.y = max(na.omit(dfTotalImagesLSTNDVI$lst_value))-3, aes(label = ..rr.label..))
plot (b)
#rm (pl)
palNoTransp <- colorRampPalette(c(rgb(1,1,0,1),rgb(1,0,0,1)), alpha=TRUE)(10)
print(plot(imgToPlot, legend.only=TRUE, axes=FALSE,legend=TRUE, col = palNoTransp, horizontal = TRUE, box=FALSE, add=TRUE, legend.outside = TRUE,
legend.args=list(text='DAI', side=1, font=2, line=2, cex=0.8)))
(1+2+3+4+5+6+7+8+9+1+2+3)
avg(1+2+3+4+5+6+7+8+9+1+2+3)
51/12
16/5
18/5
11/3
35/8
26/5
38/8
14/3
14/5
14/3
14/5
26/6
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
knitr::opts_knit$set(root.dir = '/Users/franciscorodriguezgomez/Documents/URSUS-DM/clustering R/data')
library(plyr)
library(tidyverse) ## *****************
library(factoextra) # fviz_dist(res.dist
library(dtwclust) ## *****************
library(NbClust) #res.nbclust
library(fpc) #resultados_PAM_k4<- pamk(
library(DescTools) # funcion AUC
library (CEC)
library(TSdist)
library(classInt) #para dividir en partes kmeans, jenks, fisher
library(histogram)
library(cluster)
library(readxl)  # read excel files
library(writexl) # write excel files
library(extrafont)
library (ggplot2)
require(scales)
library(clValid)
library (ClusterR)
library (clusterCrit)
set.seed(1234)
#library(sparklyr)
#setwd ('/Users/franciscorodriguezgomez/Documents/URSUS-DM/clustering R/data')
updateR()
install.packages("installr")
updateR()
require(installr)
updateR()
install.packages("devtools")
devtools::install_github("AndreaCirilloAC/updateR")
updateR()
R.version
R.version
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=60), echo = TRUE,
cache = FALSE, dev = 'pdf')
library(raster)
library (knitr)
library (rgdal)
library(RStoolbox)
library(imager)
library(RGISTools)
#library(parallel)
library(zoom)
library(excelR)
library(scico)
library(leaflet)
library(tidyverse)
library(ggplot2)
library(widgetframe)
library(rpart.plot)
library(rpart)
library(randomForest)
library(caret)
library(cetcolor)
library(magick)
library(caTools)
library(Metrics)
library(imager)
library(caret) # data wrangling
library(rasterVis)
library(factoextra)
library(clustertend)
library(NbClust)
library(data.table)
library (DescTools)
library(RColorBrewer)
library(wesanderson)
library(ggplot2)
library(formatR)
library(kableExtra)
library(ggpubr)
library(colorRamps)
library(RColorBrewer)
library(sen2r)
library(gdalUtils)
library(sp)
library(tools)
library(fieldRS)
library(lidR)
library(rgl)
library(rasterVis)
library(doParallel)
library(mlbench)
library (vip)
library (NeuralNetTools)
plotImportanceScoring = function(varImp,title) {
V = varImp
ggplot2::ggplot(V, aes(x=reorder(rownames(V),Overall), y=Overall)) +
geom_point( color="blue", size=4, alpha=0.6)+
geom_segment( aes(x=rownames(V), xend=rownames(V), y=0, yend=Overall),
color='skyblue') +
xlab('Variable')+
ylab('Overall Importance')+
theme_light() +
ggtitle (title) +
coord_flip()
}
plotImportanceScoringNN = function(varImp,title) {
V = varImp
ggplot2::ggplot(V, aes(x=reorder(Variable,Overall), y=Overall)) +
geom_point( color="blue", size=4, alpha=0.6)+
geom_segment( aes(x=Variable, xend=Variable, y=0, yend=Overall),
color='skyblue') +
xlab('Variable')+
ylab('Overall Importance')+
theme_light() +
ggtitle (title) +
coord_flip()
}
bla <- readRDS("nnModel.rds")
plot (bla)
nnModel <- readRDS("nnModel.rds")
library(ggplot2)
ggplot(stack(dfFinal), aes(x = ind, y = values)) +
geom_boxplot()
library(ggplot2)
dfFinal <- read.csv("DF_FINAL_FOR_MODEL_TRAINING.csv")
ggplot(stack(dfFinal), aes(x = ind, y = values)) +
geom_boxplot()
library(ggplot2)
dfFinal <- read.csv("DF_FINAL_FOR_MODEL_TRAINING.csv")
ggplot(stack(dfFinal), aes(x = values, y = ind)) +
geom_boxplot()
library(ggplot2)
dfFinal <- read.csv("DF_FINAL_FOR_MODEL_TRAINING.csv")
ggplot(stack(dfFinal), aes(x = values, y = ind)) +
geom_boxplot()
library(ggplot2)
dfFinal <- read.csv("DF_FINAL_FOR_MODEL_TRAINING.csv")
ggplot(stack(dfFinal), aes(x = exist_dense_veg, y = values)) +
geom_boxplot()
library(ggplot2)
dfFinal <- read.csv("DF_FINAL_FOR_MODEL_TRAINING.csv")
ggplot(stack(dfFinal), aes(x = percent_build_less_12_less_250, y = values)) +
geom_boxplot()
library(ggplot2)
dfFinal <- read.csv("DF_FINAL_FOR_MODEL_TRAINING.csv")
ggplot(stack(dfFinal), aes(x = dfFinal$percent_build_less_12_less_250, y = values)) +
geom_boxplot()
library(ggplot2)
dfFinal <- read.csv("DF_FINAL_FOR_MODEL_TRAINING.csv")
ggplot(dfFinal, aes(x=percent_build_less_12_less_250, y=len)) +
geom_boxplot(outlier.colour="red", outlier.shape=8,
outlier.size=4)
library(ggplot2)
dfFinal <- read.csv("DF_FINAL_FOR_MODEL_TRAINING.csv")
ggplot(dfFinal, aes(x=percent_build_less_12_less_250, y=lst)) +
geom_boxplot(outlier.colour="red", outlier.shape=8,
outlier.size=4)
library(ggplot2)
dfFinal <- read.csv("DF_FINAL_FOR_MODEL_TRAINING.csv")
bla <- summarise(dfFinal, mean=mean(value), sd=sd(value))
library(ggplot2)
dfFinal <- read.csv("DF_FINAL_FOR_MODEL_TRAINING.csv")
bla <- dfFinal %>%
summarise_all(mean)
bla
library(ggplot2)
dfFinal <- read.csv("DF_FINAL_FOR_MODEL_TRAINING.csv")
means <- dfFinal %>%
summarise_all(mean)
sd <- dfFinal %>%
summarise_all(sd)
median <- dfFinal %>%
summarise_all(median())
library(ggplot2)
dfFinal <- read.csv("DF_FINAL_FOR_MODEL_TRAINING.csv")
means <- dfFinal %>%
summarise_all(mean)
sd <- dfFinal %>%
summarise_all(sd)
library(ggplot2)
dfFinal <- read.csv("DF_FINAL_FOR_MODEL_TRAINING.csv")
means <- dfFinal %>%
summarise_all(mean)
sd <- dfFinal %>%
summarise_all(sd)
library(ggplot2)
dfFinal <- read.csv("DF_FINAL_FOR_MODEL_TRAINING.csv")
res <- dfFinal %>%
summarise_all(funs(mean,sd))
res
boxplot (dfFinal)
library(ggplot2)
dfFinal <- read.csv("DF_FINAL_FOR_MODEL_TRAINING.csv")
dfFinal <- dfFinal %>% select(-coord_x,-coord_y,-lst_norm,-dai,-ID,-dai_norm)
res <- dfFinal %>%
summarise_all(funs(mean,sd))
bla
res
boxplot (dfFinal)
boxplot (dfFinal$temp_less_250)
boxplot (dfFinal$temp_less_250,names='temp_less_250')
boxplot (dfFinal$temp_less_250,show.names=TRUE)
boxplot (dfFinal[0:3],show.names=TRUE)
boxplot (dfFinal[1:3],show.names=TRUE)
boxplot (dfFinal[1:2],show.names=TRUE)
plot (nn)
plot (nnModel)
for (n in 1 : ncol(dfFinal)){
if (i%%4==0) {
boxplot (dfFinal[i:i+4],show.names=TRUE)
}
}
for (n in 1 : ncol(dfFinal)){
if (i%%4==0) {
boxplot (dfFinal[i:i+4],show.names=TRUE)
plot (boxplot)
}
}
for (n in 1 : ncol(dfFinal)){
if (i%%4==0) {
bla <- boxplot (dfFinal[i:i+4],show.names=TRUE)
plot (bla)
}
}
for (n in 1 : ncol(dfFinal)){
if (n%%4==0) {
bla <- boxplot (dfFinal[i:i+4],show.names=TRUE)
plot (bla)
}
}
for (n in 1 : ncol(dfFinal)){
if (n%%4==0) {
bla <- boxplot (dfFinal[n:n+4],show.names=TRUE)
plot (bla)
}
}
for (n in 1 : ncol(dfFinal)){
if (n%%2==0) {
bla <- boxplot (dfFinal[n:n+2],show.names=TRUE)
plot (bla)
}
}
for (n in c(1 : ncol(dfFinal) ) ){
if (n%%2==0) {
bla <- boxplot (dfFinal[n:n+2],show.names=TRUE)
plot (bla)
}
}
c(1 : ncol(dfFinal)
)
for (n in c(1 : ncol(dfFinal) ) ){
if (n%%2==0) {
print (n)
bla <- boxplot (dfFinal[n:n+2],show.names=TRUE)
plot (bla)
}
}
dfFinal[2:4]
dfFinal[n:n+2]
for (n in c(1 : ncol(dfFinal) ) ){
if (n%%2==0) {
print (n)
bla <- boxplot (dfFinal[n:(n+2)],show.names=TRUE)
plot (bla)
}
}
dfFinal[0]
dfFinal[0:1]
dfFinal[0:1][2]
dfFinal[0,1]
dfFinal[0:1][0]
dfFinal[0:1][1]
for (n in c(0 : ncol(dfFinal) ) ){
if (n%%2==0) {
print (n)
bla <- boxplot (dfFinal[n:(n+2)],show.names=TRUE)
plot (bla)
}
}
for (n in c(0 : ncol(dfFinal) ) ){
if (n%%2==0) {
print (n)
bla <- boxplot (dfFinal[n:(n+2)],show.names=TRUE)
plot (bla)
}
else
print (n)
}
for (n in c(0 : ncol(dfFinal) ) ){
if (n%%2==0) {
print (n)
bla <- boxplot (dfFinal[n:(n+2)])
plot (bla)
}
else
print (n)
}
for (n in c(0 : ncol(dfFinal) ) ){
if (n%%2==0) {
print (n)
bla <- boxplot (dfFinal[n:(n+1)],show.names=TRUE)
plot (bla)
}
else
print (n)
}
for (n in c(1 : ncol(dfFinal) ) ){
if (n%%2==0) {
print (n)
bla <- boxplot (dfFinal[n:(n+1)],show.names=TRUE)
plot (bla)
}
else
print (n)
}
for (n in c(1 : ncol(dfFinal) ) ){
if (n%%2==0) {
print (n)
bla <- boxplot (dfFinal[n:(n+1)],show.names=TRUE)
plot (bla)
}
else {
print (n)
print (n+2)
}
}
for (n in c(1 : ncol(dfFinal) ) ){
if (n%%2==0) {
print (n)
print (n+1)
bla <- boxplot (dfFinal[n:(n+1)],show.names=TRUE)
plot (bla)
}
else {
print (n)
print (n+1)
}
}
for (n in c(1 : ncol(dfFinal) ) ){
if (n%%2==0) {
print (n)
print (n+1)
print ("pinta")
bla <- boxplot (dfFinal[n:(n+1)],show.names=TRUE)
plot (bla)
}
else {
print (n)
print (n+1)
}
}
bla <- boxplot (dfFinal[1:2],show.names=TRUE)
boxplot (dfFinal[1:2],show.names=TRUE)
boxplot (dfFinal[1:2],show.names=TRUE)
boxplot (dfFinal[2:3],show.names=TRUE)
for (n in 1 : nrow(dfFinal)){
boxplot (dfFinal[n:n+1],show.names=TRUE)
}
shiny::runApp('Documents/URSUS-DM/LST_PRED_APP')
runApp('Documents/URSUS-DM/LST_PRED_APP')
runApp('Documents/URSUS-DM/LST_PRED_APP')
runApp('Documents/URSUS-DM/LST_PRED_APP')
runApp('Documents/URSUS-DM/LST_PRED_APP')
runApp('Documents/URSUS-DM/LST_PRED_APP')
bla <- c(20,30)
bla[1]
runApp('Documents/URSUS-DM/LST_PRED_APP')
runApp('Documents/URSUS-DM/LST_PRED_APP')
runApp('Documents/URSUS-DM/LST_PRED_APP')
runApp('Documents/URSUS-DM/LST_PRED_APP')
runApp('Documents/URSUS-DM/LST_PRED_APP')
runApp('Documents/URSUS-DM/LST_PRED_APP')
runApp('Documents/URSUS-DM/LST_PRED_APP')
ctg
#load Lidar catalog from data folder
dataFiles <- "/Users/franciscorodriguezgomez/Documents/URSUS-DM/LST_PRED_APP/data/MALAGA/"
files<-list.files(path=dataFiles, full.names = TRUE)
print (files)
ctg <- readLAScatalog(files)
return (ctg)
ctg
ctg
runApp('Documents/URSUS-DM/LST_PRED_APP')
runApp('Documents/URSUS-DM/LST_PRED_APP')
runApp('Documents/URSUS-DM/LST_PRED_APP')
runApp('Documents/URSUS-DM/LST_PRED_APP')
runApp('Documents/URSUS-DM/LST_PRED_APP')
runApp('Documents/URSUS-DM/LST_PRED_APP')
shiny::runApp('Documents/URSUS-DM/LST_PRED_APP')
runApp('Documents/URSUS-DM/LST_PRED_APP')
runApp('Documents/URSUS-DM/LST_PRED_APP')
runApp('Documents/URSUS-DM/LST_PRED_APP')
runApp('Documents/URSUS-DM/LST_PRED_APP')
runApp('Documents/URSUS-DM/LST_PRED_APP')
runApp('Documents/URSUS-DM/LST_PRED_APP')
runApp('Documents/URSUS-DM/LST_PRED_APP')
runApp('Documents/URSUS-DM/LST_PRED_APP')
runApp('Documents/URSUS-DM/LST_PRED_APP')
runApp('Documents/URSUS-DM/LST_PRED_APP')
runApp('Documents/URSUS-DM/LST_PRED_APP')
runApp('Documents/URSUS-DM/LST_PRED_APP')
runApp('Documents/URSUS-DM/LST_PRED_APP')
runApp('Documents/URSUS-DM/LST_PRED_APP')
runApp('Documents/URSUS-DM/LST_PRED_APP')
runApp('Documents/URSUS-DM/LST_PRED_APP')
runApp('Documents/URSUS-DM/LST_PRED_APP')
runApp('Documents/URSUS-DM/LST_PRED_APP')
runApp('Documents/URSUS-DM/LST_PRED_APP')
runApp('Documents/URSUS-DM/LST_PRED_APP')
runApp('Documents/URSUS-DM/LST_PRED_APP')
shiny::runApp()
